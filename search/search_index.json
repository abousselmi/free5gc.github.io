{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-free5gc","title":"What is free5GC?","text":"<p>The free5GC is an open-source project for 5th generation (5G) mobile core networks. The ultimate goal of this project is to implement the 5G core network (5GC) defined in 3GPP Release 15 (R15) and beyond.</p> <p>Currently, the major contributors are with National Chiao Tung University (NCTU). Please refer to our roadmap for the features of each release.</p> <ul> <li> <p>The source code of the latest version free5GC can be downloaded from here.</p> </li> <li> <p>The source code of free5GC stage 2 (ARM version) can be downloaded from here.</p> </li> <li> <p>The source code of free5GC stage 1 can be downloaded from here.</p> </li> </ul> <p>Note</p> <p>Thank you very much for your interest in free5GC. Except for stage 1,the license of free5GC follows Apache 2.0. That is, anyone can use free5GC for commercial purposes for free.  We will not charge any license fee. Because we receive many emails each day asking for technical questions, we are unable to answer all of them. If you want us to answer your questions, please consider joining our membership program.  If you are not our member, we may still answer your questions. However, your priority will be the lowest.</p>"},{"location":"#members","title":"Members","text":""},{"location":"#platinum","title":"Platinum","text":""},{"location":"#gold","title":"Gold","text":""},{"location":"#silver","title":"Silver","text":""},{"location":"#hardware-sponsors","title":"Hardware Sponsors","text":""},{"location":"publication/","title":"Publications using free5GC","text":"<ol> <li> <p>V. Jain, H.-T. Chu, S. Qi, C.-A. Lee, H.-C. Chang, C.-Y. Hsieh, K. K. Ramakrishnan, and J.-C. Chen, \"L25GC: A Low Latency 5G Core Network based on High-Performance NFV Platforms,\" full paper, ACM SIGCOMM Conference (SIGCOMM \u201822), (Amsterdam, Netherlands), pp. 143\u2013157, Aug. 2022.</p> </li> <li> <p>C.-Y. Hsieh, Y.-W. Chang, C. Chen, and J.-C. Chen, \"Poster: Design and Implementation of a Generic 5G User Plane Function Development Framework,\" ACM International Conference on Mobile Computing and Networking (MobiCom \u201821), (New Orleans, United States), pp. 846\u2013848, Oct. 2021. (Won second place of the ACM MobiCom 2021 Student Research Competition)</p> </li> <li> <p>Ralf Kundel, et al., \"User plane hardware acceleration in access networks: Experiences in offloading network functions in real 5g deployments,\" Hawaii International Conference on System Sciences. Computer Society Press, 2022.</p> </li> <li> <p>Taeyun Kim, et al., \"An Implementation Study of Network Data Analytic Function in 5G,\" IEEE International Conference on Consumer Electronics, 2022.</p> </li> <li> <p>Zhou Cong, et al., \"CeUPF: Offloading 5G User Plane Function to Programmable Hardware Base on Co-existence Architecture,\" ACM International Conference on Intelligent Computing and its Emerging Applications, 2021.</p> </li> <li> <p>Gholamreza Ramezan, et al., \"EAP-ZKP: A Zero-Knowledge Proof based Authentication Protocol to Prevent DDoS Attacks at the Edge in Beyond 5G,\" IEEE 4th 5G World Forum, 2021.</p> </li> <li> <p>Ryan Pepito and Ashutosh Dutta, \"Open Source 5G Security Testbed for Edge Computing,\" IEEE 5G World Forum (5GWF), 2021.</p> </li> <li> <p>Robert MacDavid, et al., \"A P4-based 5G User Plane Function,\" 2021.</p> </li> <li> <p>Joe Breen, et al., \"Powder: Platform for Open Wireless Data-driven Experimental Research\",\" Computer Networks, 2021.</p> </li> <li> <p>Endri Goshi, et al,, \"Investigating Inter-NF Dependencies in Cloud-Native 5G Core Network,\" International Conference on Network and Service Management, 2021.</p> </li> <li> <p>Zhi-Li Zhang, et al., \"Towards aSoftware-Defined, Fine-Grained QoS Framework for 5G and Beyond Networks,\" ACM SIGCOMM Workshop on Network-Application Integration, 2021.</p> </li> <li> <p>Zujany Salazar, et al, \"5Greplay: a 5G Network Traffic Fuzzer - Application to Attack Injection,\" International Conference on Availability, Reliability and Security, 2021.</p> </li> <li> <p>Yu-Herng Chai, and Fuchun Joseph Lin, \"Evaluating Dedicated Slices of Different Configurations in 5G Core,\" Computer and Communications, 9(7), p.55-72, 2021.</p> </li> <li> <p>M.J. Kim, et al., \"Analysis of Current 5G Open-Source Projects,\" Electronics and Telecommunications Trends, 36(2), p.83-92, 2021.</p> </li> <li> <p>Yang Hu, et al., \"Fuzzing Method Based on Selection Mutation of Partition Weight Table for 5G Core Network NGAP Protocol,\" International Conference on Innovative Mobile and Internet Services in Ubiquitous Computing. Springer, Cham, 2021.</p> </li> <li> <p>Cheng-Chin Tsai, Fuchun Joseph Lin, and Hiroshige Tanaka, \"Evaluation of 5G Core Slicing on User Plane Function,\" Communications and Network, 13(3), p.79-92, 2021.</p> </li> <li> <p>Wei-Cheng Chang, and Fuchun Joseph Lin, \"Coordinated Management of 5G Core Slices by MANO and OSS/BSS,\" Computer and Communications, 9(6), p.52-72, 2021.</p> </li> <li> <p>Ayoub Bergaoui, et al., \"Demonstration of Orchestration of 5G Core Network Functions with a Satellite Emulator,\" 2021.</p> </li> <li> <p>Seungjoon Seok, et al, \"Towards Service and Networking Intelligence for Humanity: A Report on APNOMS 2020,\" Network and Systems Management, 29(4), p.1-11, 2021.</p> </li> <li> <p>Dener Kraus, \"Computa\u00e7\u00e3o de borda para ind\u00fastria utilizando a rede 5G,\" 2021.</p> </li> <li> <p>Iria M\u00edguez Gonz\u00e1lez, \"Virtualized cellular networks with native cloud functions,\" Master Thesis, Telecommunications Engineering School, 2021.</p> </li> <li> <p>Cameron MacLeod, \"Kubernetes for the Deployment of Mobile Core Networks,\" 2020.</p> </li> <li> <p>Yi-Bing Lin, Chien-Chao Tseng, and Ming-Hung Wang, \"Effects of Transport Network Slicing on 5G Applications,\" Future Internet, 13(3), p.69, 2021.</p> </li> <li> <p>Alireza Hosseini Vasoukolaei, Danish Sattar, and Ashraf Matrawy, \"TLS Performance Evaluation in the Control Plane of a 5G Core Network Slice,\" 2021.</p> </li> <li> <p>Rui Silva, et al., \"A hybrid SDN solution for mobile networks,\" Computer Networks, 2021.</p> </li> <li> <p>Wei-Lun Lin, Chien-Hsuan Chen, and Huai-Sheng Huang, \"Study on the Online Charging System in B5G Era,\" IEEE Asia-Pacific Network Operations and Management Symposium, 2021.</p> </li> <li> <p>David Lake, et al. \", \"Softwarization of 5G Networks \u2013 Implications to Open Platforms and Standardizations,\" IEEE access 9, 2021.</p> </li> <li> <p>Ali Esmaeily, and Katina Kralevska, \"Small-Scale 5G Testbeds for Network Slicing Deployment: A Systematic Review,\" Wireless Communications and Mobile Computing, 2021.</p> </li> <li> <p>Cheng-Ying Hsieh, et al., \"Design and implementation of a generic 5G user plane function development framework,\" Annual International Conference on Mobile Computing and Networking, 2021.</p> </li> <li> <p>Yu-Herng Chai, and Fuchun Joseph Lin, \",\" Computer and Communications, 9(7), p.55-72, 2021.</p> </li> <li> <p>Ashok Kumar Murthy, Ranjani Parthasarathi, and V. Vetriselvi, \"Security Testbed for Next Generation Mobile Networks,\" IEEE Third ISEA Conference on Security and Privacy, p.122-129, 2020.</p> </li> <li> <p>Tze-Jie Tan, et al., \"A Reliable Intelligent Routing Mechanism in 5G Core Network (5GC),\" Annual International Conference on Mobile Computing and Networking, 2020.</p> </li> <li> <p>Merlin Chlosta, et al., \"5G SUCI-Catchers: Still catching them all?\" Annual International Conference on Mobile Computing and Networking, 2020.</p> </li> <li> <p>Chia-Wei Liao, Fuchun Joseph Lin, and Yoichi Sato, \"Evaluating NFV-enabled Network Slicing for 5G Core,\" IEEE Asia-Pacific Network Operations and Management Symposium, 2020.</p> </li> <li> <p>\u017diga Ber\u010di\u010d, et al., \"Raziskava in prakti\u010dni preizkus odprtokodnih mobilnih jedrnih sistemov 4G in 5G,\" Diss. Univerza v Ljubljani, Fakulteta za elektrotehniko, 2020.</p> </li> <li> <p>Christian Mailer, \"Plataforma de CORE 5G em nuvem para disponibiliza\u00e7\u00e3o de fun\u00e7\u00f5es de rede como servi\u00e7o,\" 2020.</p> </li> <li> <p>Leonardo Bonati, et al., \"Open, Programmable, and Virtualized 5G Networks: State-of-the-Art and the Road Ahead,\" Computer Networks, 2020.</p> </li> <li> <p>Hung-Yen Weng, Ren-Hung Hwang, and Chin-Feng Lai, \"Live MPEG-DASH video streaming cache management with cognitive mobile edge computing,\" Ambient Intelligence and Humanized Computing p.1-18, 2020.</p> </li> <li> <p>Junaid Jalal, \"Enabling Edge Computing In 5G Via Local Area Data Network: Implementation and Experiments,\" Master Thesis, University of Agder, 2019.</p> </li> </ol>"},{"location":"videos/","title":"Other videos showing free5GC","text":"<ol> <li> <p>Akraino Blueprints: Integrated Cloud Native Private Wireless, The Linux Foundation, October 11, 2021</p> </li> <li> <p>SD Core Techinar July 7 2021, Open Networking Foundation, July 13, 2021</p> </li> <li> <p>Aarna Networks MWC 2021 Demo, Aarna Networks Channel, June 27, 2021</p> </li> <li> <p>OpenStack Tacker Demo, Open Infrastructure Foundation, April 26, 2021</p> </li> <li> <p>OpenNess Tungsten Fabric free5GC demo, Aarna Networks Channel, February 16, 2021</p> </li> <li> <p>5G Core on Diamanti, Diamanti, Inc., February 3, 2021</p> </li> <li> <p>free5GC (5G Core) Orchestration on Kubernetes with Tungsten Fabric CNI and Testing, Aarna Networks Channel, December 2, 2020</p> </li> <li> <p>IoT LoRa (sensors and gateway in hardware), RAN in hardware (SDR) and software, and the free5GC, LABORA Research Group, July 3, 2020</p> </li> <li> <p>UE and eNodeB in Hardware (conventional cell phone + SDR) and free5GC: a pratical approach in 5G, LABORA Research Group, July 3, 2020</p> </li> <li> <p>OpenAirInterface and free5GC: a pratical approach in 5G networks, LABORA Research Group, June 29, 2020</p> </li> </ol>"},{"location":"blog/","title":"Blogs","text":"<ul> <li>Running Free5GC on Platform9 Managed Kubernetes</li> <li>Deploying 5G core network with Free5GC, Kubernetes and Helm</li> <li>Introduce to 5GC (written in traditional chinese)</li> </ul>"},{"location":"guide/","title":"User Guide","text":""},{"location":"guide/#free5gc-installation-guide","title":"free5GC Installation Guide","text":"<p>For people who are not familiar with virtual machine and Linux installation, here are some example demonstration:</p> <ul> <li>Creating a Ubuntu VM using VirtualBox</li> <li>Creating and Configuring a free5GC VM</li> <li>Installing and Testing free5GC Core Network</li> <li>Installing a UE/RAN Simulator</li> <li>free5GC Simple Apps</li> <li>All of tutorial videos are available at our Youtube Channel EN/ZH-TW</li> <li>Environment setup of multiple SMF, DNN, and UPF</li> </ul>"},{"location":"guide/#configuration","title":"Configuration","text":"<ul> <li>Environment</li> <li>Basic</li> <li>SMF</li> <li>Webconsole</li> <li>Select UPF based on S-NSSAI</li> <li>Select nearby UPF according to the connected gNodeB</li> <li>ULCL</li> <li>Netns5g - A free5gc and UERANSIM deployment using Linux network namespaces</li> </ul>"},{"location":"guide/#deployment","title":"Deployment","text":"<p>For Container deployment:</p> <ul> <li>free5GC Compose (Docker Compose)</li> <li>Towards5gs-helm (Kubernetes)</li> </ul>"},{"location":"guide/#others","title":"Others","text":"<ul> <li>Release Note</li> <li>Supported features</li> <li>Trouble Shooting</li> <li>Appendix</li> </ul>"},{"location":"guide/1-vm-en/","title":"Ubuntu Virtual Machine Installation Demo","text":"<p>In this demo, we will</p> <ul> <li>install VirtualBox</li> <li>create a Ubuntu Server VM using VirtualBox</li> <li>use SSH to connect to the Ubuntu VM to install free5GC stage 3</li> <li>Update and upgrade Ubuntu</li> </ul>"},{"location":"guide/1-vm-en/#1-install-virtualbox","title":"1. Install VirtualBox","text":"<p>Search <code>virtualbox download</code>, or visit virtualbox.org to download and install VirtualBox (currently 6.1.18) for your operation system. </p> <p>Once installed VirtualBox, launch and see if you have something like this: </p>"},{"location":"guide/1-vm-en/#2-download-ubuntu-server","title":"2. Download Ubuntu Server","text":"<p>Search <code>ubuntu server download</code> on the web and download the latest Ubuntu Server LTS, or visit ubuntu.com, choose Manual Installation Option to download the <code>.iso</code> file (currently 20.04.2 LTS) </p> <p>You should have downloaded a <code>.iso image</code> file with name like <code>ubuntu-20.04.1-live-server-amd64.iso</code>, probably in your download directory. </p>"},{"location":"guide/1-vm-en/#3-create-a-ubuntu-server-vm","title":"3. Create a Ubuntu Server VM","text":"<p>Launch VirtualBox and create your first Ubuntu VM using the downloaded .iso image file. We use Ubuntu Server instead of Ubuntu Desktop because we only need a basic server machine without too many unnecessary functionalities. The resulting overhead to your host machine is smaller, and the VM starts up faster too.</p> <p>Tips</p> <ul> <li>Name the first VM using a generic name as ubuntu, <code>ubuntu-server</code>, or <code>ubuntu-20.04</code>.</li> <li>You can pick 1 or 2 (or more) CPUs, and about 2048M memory, although you can change them later.</li> <li>In addition to the default NAT network interface, also add another \u201cHost-only\u201d network interface.</li> </ul> <p>Refer to the videos Creating VM, Setting up VM.</p>"},{"location":"guide/1-vm-en/#31-start-installing-ubuntu","title":"3.1 Start Installing Ubuntu","text":"<p>Some notes about installing Ubuntu:</p> <ul> <li>It is recommended that you choose short username and password for ease of typing later</li> <li>Not choosing LVM will make it a little bit easier later if you want to extend your disk space</li> <li>Choose to include SSH Server</li> <li>Let security update complete</li> </ul> <p>Refer to videos Install Ubuntu 1, Install Ubuntu 2.</p>"},{"location":"guide/1-vm-en/#32-log-in-into-ubuntu","title":"3.2 Log in into Ubuntu","text":"<p>Reboot after Ubuntu installation complete; wait a little bit for some initialization steps complete. Then log in with your username and password. </p> <p>First try the <code>ifconfig</code> command\uff1a <pre><code>ubuntu@ubuntu:~$ ifconfig\nCommand 'ifconfig' not found, but can be installed with:\nsudo apt install net-tools\nubuntu@ubuntu:~$\n</code></pre></p> <p>If some messages like above show, it means <code>ifconfig</code> has not been installed yet. (<code>ifconfig</code> is no longer installed by defaults in newer Ubuntu, and is replaced by more versatile ip command, but we will use it here for simplicity).</p> <p>Follow its suggestion and install <code>ifconfig</code>: <pre><code>ubuntu@ubuntu:~$ sudo apt install net-tools\n</code></pre> Below shows the installation result: </p> <p>Run <code>ifconfig</code> again to check the network interfaces: </p> <p>Your display may look different, but take notes about the IP address of the Host-only interface card. The example above shows <code>192.168.56.101</code>. You can SSH from your host machine into this Ubuntu VM using the IP later. (Another IP address, <code>10.0.2.15</code> is the IP address of the NAT interface card, the apps in your host machine cannot access it).</p> <p>Finally check if the VM has internet access: <pre><code>ubuntu@ubuntu:~$ ping google.com\n</code></pre></p> <p></p> <p>Refer to the first part of the video Ping, SSH, and Upgrade.</p>"},{"location":"guide/1-vm-en/#4-connect-to-the-ubuntu-vm-using-ssh","title":"4. Connect to the Ubuntu VM using SSH","text":"<p>Launch your favorite SSH client from the host machine. Some operation systems (Mac, Ubuntu, some Windows) have pre-installed SSH clients. If you are using Windows, you can also download third-party SSH clients. For example, search \u201cwindows ssh download\u201d on the web.</p> <p>The benefit of using SSH is that you can easily copy and paste commands from your machine to Ubuntu VM for execution, and vice versa. You can also create multiple SSH connections with the Ubuntu VM for control and monitoring at the same time.</p> <p>Below shows some examples on a Mac host machine. Suppose the Host-only network IP is <code>192.168.56.101</code>, and tue username is ubuntu: <pre><code>ssh 192.168.56.101 -l ubuntu\n</code></pre> The first time you connect to the VM, your SSH client may show some message asking you for confirmation. Enter yes: </p> <p>Tips</p> <p>If somehow SSH shows some warning messages telling you the machine has potential security risk, you may have to remove an entry in the file <code>&lt;your home directory&gt;/.ssh/known_hosts</code> related the the IP address.</p> <p>If you log in successfully, you will enter a command line interface: </p> <p>Repeat the basic commands such as <code>ping</code>, <code>ifconfig</code> to see if the VM is working properly. If so, we can access the Ubuntu VM \u201cremotely\u201d from now on.</p> <p> </p>"},{"location":"guide/1-vm-en/#5-update-and-upgrade-your-ubuntu","title":"5. Update and Upgrade your Ubuntu","text":"<p>Let also update and upgrade the Ubuntu VM right now to make sure it is up-to-date with proper security updates. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p>"},{"location":"guide/2-config-vm-en/","title":"Creating a free5GC VM and Setting up Network","text":"<p>In this demo we will exercise:</p> <ul> <li>Cloning an existing VM, and install free5GC on it</li> <li>Setting up the networking for the free5GC VM</li> </ul> <p>Tips</p> <p>Refer to video Clone VM and Change IP.</p>"},{"location":"guide/2-config-vm-en/#1-check-up-an-existing-vm-for-cloning","title":"1. Check up an existing VM for Cloning","text":"<p>Launch VirtualBox, and make sure the Ubuntu VM (ubuntu) we created before can boot up, then:</p> <ul> <li>Log in into the VM using SSH from the host machine, and check if the VM has internet access</li> <li>Make sure you have done <code>sudo apt update</code> and <code>sudo apt upgrade</code> (or you can do it again)</li> <li>Shutdown the VM. You can:</li> <li>use command <code>sudo shutdown -P now</code>, or</li> <li>click the \u201cClose Window\u201d of the Ubuntu VM terminal and choose the middle option (better not force to turn off the machine power)</li> <li>later if you just want to reboot, enter <code>sudo shutdown -r now</code></li> </ul>"},{"location":"guide/2-config-vm-en/#2-create-a-free5gc-vm","title":"2. Create a free5GC VM","text":"<p>First let\u2019s clone a new VM:</p> <ul> <li>Select an existing VM (ubuntu) and click the buttons on the right: / Snapshopts / Clone.</li> <li>Name the new VM <code>free5gc</code>.</li> <li>The MAC address rule: Create new MAC addresses for all network cards.</li> <li>Choose the Link cloning option (or you can also choose to complete clone the VM if you like).</li> </ul> <p>After the new VM is created:</p> <ul> <li>Start up the new free5gc VM, and use the same username and password to log in.</li> <li>In the Ubuntu terminal, issue <code>ping</code> and <code>ifconfig</code> again to make sure it has internet access, and also make note of the IP address of the Host-only network interface.<ul> <li>for example the IP could still be <code>192.168.56.101</code>, and the interface name is <code>enp0s8</code>.</li> </ul> </li> <li>Log in into free5gc VM using SSH, and make sure all things working properly.</li> </ul>"},{"location":"guide/2-config-vm-en/#3-change-hostname","title":"3. Change hostname","text":"<p>The cloned free5gc VM still has host name <code>ubuntu</code> (or the name you gave it in the original VM). Let\u2019s rename the VM to <code>free5gc</code>. You can do this by editing the file <code>/etc/hostname</code> (using <code>vi</code> or <code>nano</code>): <pre><code>sudo nano /etc/hostname\n# or \nsudo vi /etc/hostname\n</code></pre> In the file, change ubuntu into <code>free5gc</code>\u3002If you are using nano \uff0cyou can press <code>Ctrl-O</code> to save the file, then <code>Ctrl-X</code> to exit.</p> <p>Let\u2019s also change the file <code>/etc/hosts</code> by replacing the ubuntu inside into <code>free5gc</code>: <pre><code>sudo nano /etc/hosts\n</code></pre></p> <p>New content of the file <code>/etc/hosts</code> looks like this: <pre><code>127.0.0.1 localhost\n127.0.1.1 free5gc\n...\n</code></pre></p> <p>The changes will take effect after next reboot.</p>"},{"location":"guide/2-config-vm-en/#4-setting-static-ip-address","title":"4. Setting Static IP Address","text":"<p>The Host-only network interface, by default, gets its IP address through DHCP. The cloned free5gc VM seems to have trouble obtaining new IP address. We can change the host-only interface to use static IP address instead, which can save a lot of trouble later.</p> <p>Here let\u2019s fix the static IP address as <code>192.168.56.101</code>: <pre><code>$ cd /etc/netplan\n$ ls\n00-installer-config.yaml\n$ cat 00-installer-config.yaml\n</code></pre> The original content of the file <code>00-installer-config.yaml</code> looks like: <pre><code># This is the network config written by 'subiquity'\nnetwork:\n  ethernets:\n    enp0s3:\n      dhcp4: true\n    enp0s8:\n      dhcp4: true\n  version: 2\n</code></pre> meaning the VM has two network interfaces. Using <code>ifconfig</code> we know that <code>enp0s8</code> is the name of the Host-only network interface. We can edit the file: <pre><code>sudo nano 00-installer-config.yaml\n</code></pre> and change it into: <pre><code># This is the network config written by 'subiquity'\nnetwork:\n  ethernets:\n    enp0s3:\n      dhcp4: true\n    enp0s8:\n      dhcp4: no\n      addresses: [192.168.56.101/24]\n  version: 2\n</code></pre> First check if the new content is correct: <pre><code>sudo netplan try\n</code></pre> Press enter to exit, if successful. The apply tne new interface setting: <pre><code>sudo netplan apply\n</code></pre> Run <code>ifconfig</code> to see if the network setting has been changed correctly: <pre><code>enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255\n        inet6 fe80::a00:27ff:fec4:254f  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 08:00:27:c4:25:4f  txqueuelen 1000  (Ethernet)\n        RX packets 2  bytes 1180 (1.1 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 18  bytes 1894 (1.8 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nenp0s8: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 192.168.56.101  netmask 255.255.255.0  broadcast 192.168.56.255\n        inet6 fe80::a00:27ff:fe7e:ada6  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 08:00:27:7e:ad:a6  txqueuelen 1000  (Ethernet)\n        RX packets 8420  bytes 531867 (531.8 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 10887  bytes 823487 (823.4 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 6621  bytes 596035 (596.0 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 6621  bytes 596035 (596.0 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> We can also check the routing table, just to have a grasp of what is going on regarding the network setting: <pre><code>$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         10.0.2.2        0.0.0.0         UG    100    0        0 enp0s3\n10.0.2.0        0.0.0.0         255.255.255.0   U     0      0        0 enp0s3\n10.0.2.2        0.0.0.0         255.255.255.255 UH    100    0        0 enp0s3\n192.168.56.0    0.0.0.0         255.255.255.0   U     0      0        0 enp0s8\n</code></pre></p> <p>For the display above, we learn that the Host-only network <code>192.168.56.0/24</code> does not have internet access by itself (even though we can access it using SSH from the host machine). Internet access is through the NAT network <code>10.0.2.0/24</code>, with the gateway being <code>10.0.2.2</code> (provided by VirtualBox). Now we can SSH into free5gc VM using <code>192.168.56.101</code>: <pre><code>ssh 192.168.56.101 -l ubuntu\n</code></pre> This is also how we interact with free5gc VM from now on.</p>"},{"location":"guide/3-install-free5gc/","title":"Installation","text":""},{"location":"guide/3-install-free5gc/#a-prerequisites","title":"A. Prerequisites","text":"<ol> <li> <p>Linux Kernel Version</p> <ul> <li>In order to use the UPF element, you must use the <code>5.0.0-23-generic</code> or <code>5.4.x</code> version of the Linux kernel.  free5gc uses the gtp5g kernel module, which has been tested and compiled against that kernel versions only. If you installed Ubuntu 20.04, the version looks like 5.4.x. To determine the version of the Linux kernel you are using:</li> </ul> <pre><code>    $ uname -r\n    5.4.0-65-generic\n</code></pre> </li> </ol> <p>You will not be able to run most of the tests in Test section unless you deploy a UPF.</p> <ol> <li> <p>Golang Version</p> <ul> <li>As noted above, free5gc is built and tested with Go 1.17.8</li> <li>To check the version of Go on your system, from a command prompt:</li> </ul> <pre><code>    go version\n</code></pre> <ul> <li>If another version of Go is installed, remove the existing version and install Go 1.17.8:</li> </ul> <pre><code>    # this assumes your current version of Go is in the default location\nsudo rm -rf /usr/local/go\n    wget https://dl.google.com/go/go1.17.8.linux-amd64.tar.gz\n    sudo tar -C /usr/local -zxvf go1.17.8.linux-amd64.tar.gz\n</code></pre> <ul> <li>If Go is not installed on your system:</li> </ul> <pre><code>    wget https://dl.google.com/go/go1.17.8.linux-amd64.tar.gz\n    sudo tar -C /usr/local -zxvf go1.17.8.linux-amd64.tar.gz\n    mkdir -p ~/go/{bin,pkg,src}\n# The following assume that your shell is bash\necho 'export GOPATH=$HOME/go' &gt;&gt; ~/.bashrc\n    echo 'export GOROOT=/usr/local/go' &gt;&gt; ~/.bashrc\n    echo 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' &gt;&gt; ~/.bashrc\n    echo 'export GO111MODULE=auto' &gt;&gt; ~/.bashrc\n    source ~/.bashrc\n</code></pre> <ul> <li>Further information and installation instructions for <code>golang</code> are available at the official golang site.</li> </ul> </li> <li> <p>Control-plane Supporting Packages</p> </li> </ol> <pre><code>sudo apt -y update\nsudo apt -y install mongodb wget git\nsudo systemctl start mongodb\n</code></pre> <ul> <li> <p>WARNING: MongoDB 5.0+ requires a CPU with AVX support. Or downgrade your MongoDB to 4.4</p> <ul> <li> <p>see https://www.mongodb.com/community/forums/t/mongodb-5-0-cpu-intel-g4650-compatibility/116610/2</p> </li> <li> <p>see also docker-library/mongo#485 (comment)</p> </li> </ul> </li> <li> <p>User-plane Supporting Packages</p> </li> </ul> <pre><code>sudo apt -y update\nsudo apt -y install git gcc g++ cmake autoconf libtool pkg-config libmnl-dev libyaml-dev\n</code></pre> <ol> <li>Linux Host Network Settings</li> </ol> <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -t nat -A POSTROUTING -o &lt;dn_interface&gt; -j MASQUERADE\nsudo iptables -A FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 1400\nsudo systemctl stop ufw\n</code></pre>"},{"location":"guide/3-install-free5gc/#b-install-control-plane-elements","title":"B. Install Control Plane Elements","text":"<ol> <li> <p>Clone the free5GC repository</p> <ul> <li>To install the latest stable build (v3.2.1):</li> </ul> <pre><code>    cd ~\n    git clone --recursive -b v3.2.1 -j `nproc` https://github.com/free5gc/free5gc.git\n    cd free5gc\n</code></pre> <ul> <li>(Alternatively) to install the latest nightly build:</li> </ul> <pre><code>    cd ~/free5gc\n    git checkout main\n    git submodule sync\n    git submodule update --init --jobs `nproc`\ngit submodule foreach git checkout main\n    git submodule foreach git pull --jobs `nproc`\n</code></pre> </li> <li> <p>Compile network function services in <code>free5gc</code></p> <ul> <li>To do so individually (e.g., AMF only):</li> </ul> <pre><code>    cd ~/free5gc\n    make amf\n</code></pre> <ul> <li>To build all network functions:</li> </ul> <pre><code>    cd ~/free5gc\n    make\n</code></pre> </li> </ol>"},{"location":"guide/3-install-free5gc/#c-install-user-plane-function-upf","title":"C. Install User Plane Function (UPF)","text":"<ol> <li>As noted above, the GTP kernel module used by the UPF requires that you use Linux kernel version <code>5.0.0-23-generic</code> or <code>5.4.x</code>.  To verify your version:</li> </ol> <pre><code>uname -r\n</code></pre> <ol> <li>Retrieve the 5G GTP-U kernel module using <code>git</code> and build it</li> </ol> <pre><code>git clone -b v0.6.8 https://github.com/free5gc/gtp5g.git\ncd gtp5g\nmake\nsudo make install\n</code></pre> <ol> <li> <p>Build the UPF (you may skip this step if you built all network functions above):</p> </li> <li> <p>to build using make:</p> </li> </ol> <pre><code>cd ~/free5gc\nmake upf\n</code></pre> <ol> <li>Customize the UPF as desired. The UPF configuration file in <code>run.sh</code> is <code>free5gc/config/upfcfg.yaml</code>.</li> </ol>"},{"location":"guide/3-install-free5gc/#d-install-webconsole","title":"D. Install WebConsole","text":"<ol> <li>Before building WebConsole, install nodejs and yarn packages first:</li> </ol> <pre><code>sudo apt remove cmdtest\nsudo apt remove yarn\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\ncurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -\nsudo apt-get update\nsudo apt-get install -y nodejs yarn\n</code></pre> <ol> <li> <p>Build WebConsole</p> </li> <li> <p>to build using make:</p> </li> </ol> <pre><code>cd ~/free5gc\nmake webconsole\n</code></pre> <ul> <li>(Alternatively) to build manually:</li> </ul> <pre><code>cd ~/free5gc/webconsole/frontend\nyarn install\nyarn build\nrm -rf ../public\ncp -R build ../public\ncd ..\ngo build -o bin/webconsole server.go\n</code></pre> <p>Note: 2GB or more of OS memory is recommended. WebConsole may be failed to build if memory is less then 1GB.</p>"},{"location":"guide/4-test-free5gc/","title":"Test free5GC","text":"<p>Start a Wireshark capture on any core-connected interface, applying the filter <code>'pfcp||icmp||gtp'</code>.</p> <p>In order to run the tests, first do this:</p> <pre><code>cd ~/free5gc\nmake upf\nchmod +x ./test.sh\n</code></pre> <p>The tests are all run from within <code>~/free5gc</code>.</p> <p>a. TestRegistration</p> <pre><code>./test.sh TestRegistration\n</code></pre> <p>b. TestGUTIRegistration</p> <pre><code>./test.sh TestGUTIRegistration\n</code></pre> <p>c. TestServiceRequest</p> <pre><code>./test.sh TestServiceRequest\n</code></pre> <p>d. TestXnHandover</p> <pre><code>./test.sh TestXnHandover\n</code></pre> <p>e. TestDeregistration</p> <pre><code>./test.sh TestDeregistration\n</code></pre> <p>f. TestPDUSessionReleaseRequest</p> <pre><code>./test.sh TestPDUSessionReleaseRequest\n</code></pre> <p>g. TestPaging</p> <pre><code>./test.sh TestPaging\n</code></pre> <p>h. TestN2Handover</p> <pre><code>./test.sh TestN2Handover\n</code></pre> <p>i. TestNon3GPP</p> <pre><code>./test.sh TestNon3GPP\n</code></pre> <p>j. TestReSynchronization</p> <pre><code>./test.sh TestReSynchronization\n</code></pre> <p>k. TestULCL</p> <pre><code>./test_ulcl.sh TestRequestTwoPDUSessions\n</code></pre>"},{"location":"guide/5-install-ueransim/","title":"Installing UERANSIM - a UE/RAN Simulator","text":"<p>In this demo we will practice:</p> <ul> <li>Installing UERANSIM</li> <li>Configuring free5GC and UERANSIM</li> <li>Running UERANSIM against free5GC</li> </ul>"},{"location":"guide/5-install-ueransim/#1-install-ueramsim-vm","title":"1. Install ueramsim VM","text":"<p>Repeat the steps of cloning <code>free5gc</code> VM from the base VM, create a new VM for the UERANSIM simulator:</p> <ul> <li>Name the VM <code>ueransim</code>, and create new MAC addresses for all network cards.</li> <li>Make sure the VM has internet access and can log in using SSH.</li> <li>Change the hostname to <code>ueransim</code>.</li> <li>Make the Host-only network interface have static IP address <code>192.168.56.102</code>.</li> <li>Reboot the ueransim VM, as well as the free5gc VM.</li> <li>You can ping <code>192.168.56.101</code> from the ueransim VM, and also <code>ping 192.168.56.102</code> from the free5gc VM.</li> </ul>"},{"location":"guide/5-install-ueransim/#2-install-ueransim","title":"2. Install UERANSIM","text":"<p>Search \u201cueransim\u201d on the web, and get the web site. On the web site, review what the UERANSIM open-source project is about, then browse into the installation page.</p> <p>To download UERANSIM: <pre><code>cd ~\ngit clone https://github.com/aligungr/UERANSIM\ncd UERANSIM\ngit checkout v3.1.0\n</code></pre></p> <p>Update and upgrade ueransim VM first: <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Install required tools: <pre><code>sudo apt install make\nsudo apt install g++\nsudo apt install libsctp-dev lksctp-tools\nsudo apt install iproute2\nsudo snap install cmake --classic\n</code></pre></p> <p>Build UERANSIM: <pre><code>cd ~/UERANSIM\nmake\n</code></pre></p>"},{"location":"guide/5-install-ueransim/#3-install-free5gc-webconsole","title":"3. Install free5GC WebConsole","text":"<p>free5GC provides a simple web tool WebConsole to help creating and managing UE registrations to be used by various 5G network functions (NF). To build WebConsole we need Node.js and Yarn.</p> <p>First SSH into free5gc (<code>192.168.56.101</code>)\uff0cand remove obsolete tools that may exists: <pre><code>sudo apt remove cmdtest\nsudo apt remove yarn\n</code></pre></p> <p>Then install <code>Node.js</code> and <code>Yarn</code>: <pre><code>curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt-get update\nsudo apt-get install -y nodejs yarn\n</code></pre></p> <p>To build WebConsole: <pre><code>cd ~/free5gc\nmake webconsole\n</code></pre></p>"},{"location":"guide/5-install-ueransim/#4-use-webconsole-to-add-an-ue","title":"4. Use WebConsole to Add an UE","text":"<p>First start up the WebConsole server: <pre><code>cd ~/free5gc/webconsole\ngo run server.go\n</code></pre></p> <p>The screen shows the port number <code>:5000</code> at the end. Open your web browser from your host machine, and enter the URL <code>http://192.168.56.101:5000</code></p> <ul> <li>On the login page, enter username <code>admin</code> and password <code>free5gc</code>.</li> <li>Once logged in, widen the page until you see \u201cSubscribers\u201d on the left-hand side column.</li> <li>Choose <code>Subscribers</code> and create a new data:<ul> <li>Note that other than the \u201cOperator Code Type\u201d field which you should choose \u201cOP\u201d for now, leave other fields unchanged. This registration data is used for ease of testing and actual use later.</li> </ul> </li> <li>After the data is created successfully, you can press <code>Ctrl-C</code> on the terminal to quit WebConsole.</li> </ul>"},{"location":"guide/5-install-ueransim/#5-setting-free5gc-and-ueransim-parameters","title":"5. Setting free5GC and UERANSIM Parameters","text":"<p>In free5gc VM, we need to edit three files:</p> <ul> <li><code>~/free5gc/config/amfcfg.yaml</code></li> <li><code>~/free5gc/config/smfcfg.yaml</code></li> <li><code>~/free5gc/config/upfcfg.yaml</code></li> </ul> <p>First SSH into free5gc VM, and change <code>~/free5gc/config/amfcfg.yaml</code>: <pre><code>cd ~/free5gc\nnano config/amfcfg.yaml\n</code></pre></p> <p>Replace ngapIpList IP from <code>127.0.0.1</code> to <code>192.168.56.101</code>, namely from: <pre><code>...\n  ngapIpList:  # the IP list of N2 interfaces on this AMF\n  - 127.0.0.1\n</code></pre> into: <pre><code>...\n  ngapIpList:  # the IP list of N2 interfaces on this AMF\n  - 192.168.56.101  # 127.0.0.1\n</code></pre></p> <p>Next edit <code>~/free5gc/config/smfcfg.yaml</code>: <pre><code>nano config/smfcfg.yaml\n</code></pre> and in the entry <code>inside userplane_information / up_nodes / UPF / interfaces / endpoints</code>, change the IP from <code>127.0.0.8</code> to <code>192.168.56.101</code>, namely from: <pre><code>...\n  interfaces: # Interface list for this UPF\n   - interfaceType: N3 # the type of the interface (N3 or N9)\n     endpoints: # the IP address of this N3/N9 interface on this UPF\n       - 127.0.0.8\n</code></pre> into: <pre><code>...\n  interfaces: # Interface list for this UPF\n   - interfaceType: N3 # the type of the interface (N3 or N9)\n     endpoints: # the IP address of this N3/N9 interface on this UPF\n       - 192.168.56.101  # 127.0.0.8\n</code></pre> Finally, edit <code>~/free5gc/config/upfcfg.yaml</code>\uff0cand chage gtpu IP from <code>127.0.0.8</code> into <code>192.168.56.101</code>, namely from: <pre><code>...\n  gtpu:\n    forwarder: gtp5g\n    # The IP list of the N3/N9 interfaces on this UPF\n    # If there are multiple connection, set addr to 0.0.0.0 or list all the addresses\n    ifList:\n      - addr: 127.0.0.8\n        type: N3\n</code></pre> into: <pre><code>...\n  gtpu:\n    forwarder: gtp5g\n    # The IP list of the N3/N9 interfaces on this UPF\n    # If there are multiple connection, set addr to 0.0.0.0 or list all the addresses\n    ifList:\n      - addr: 192.168.56.101  # 127.0.0.8\n        type: N3\n</code></pre></p>"},{"location":"guide/5-install-ueransim/#6-setting-ueransim","title":"6. Setting UERANSIM","text":"<p>In the ueransim VM, there are two files related to free5GC\uff1a</p> <ul> <li><code>~/UERANSIM/config/free5gc-gnb.yaml</code></li> <li><code>~/UERANSIM/config/free5gc-ue.yaml</code></li> </ul> <p>The second file is for UE, which we don\u2019t have to change if the data inside is consistent with the (default) registration data we set using WebConsole previously.</p> <p>First SSH into ueransim, and edit the file <code>~/UERANSIM/config/free5gc-gnb.yaml</code>, and change the ngapIp IP, as well as the gtpIp IP, from <code>127.0.0.1</code> to <code>192.168.56.102</code>\uff0cand also change the IP in amfConfigs into <code>192.168.56.101</code>, that is, from: <pre><code>...\n  ngapIp: 127.0.0.1   # gNB's local IP address for N2 Interface (Usually same with local IP)\n  gtpIp: 127.0.0.1    # gNB's local IP address for N3 Interface (Usually same with local IP)\n\n  # List of AMF address information\n  amfConfigs:\n    - address: 127.0.0.1\n</code></pre> into: <pre><code>...\n  ngapIp: 192.168.56.102  # 127.0.0.1   # gNB's local IP address for N2 Interface (Usually same with local IP)\n  gtpIp: 192.168.56.102  # 127.0.0.1    # gNB's local IP address for N3 Interface (Usually same with local IP)\n\n  # List of AMF address information\n  amfConfigs:\n    - address: 192.168.56.101  # 127.0.0.1\n</code></pre> Next we examine the file <code>~/UERANSIM/config/free5gc-ue.yaml</code>\uff0cand see if the settings is consistent with those in free5GC (via WebConsole), for example: <pre><code># IMSI number of the UE. IMSI = [MCC|MNC|MSISDN] (In total 15 or 16 digits)\nsupi: 'imsi-208930000000003'\n# Mobile Country Code value\nmcc: '208'\n# Mobile Network Code value (2 or 3 digits)\nmnc: '93'\n\n# Permanent subscription key\nkey: '8baf473f2f8fd09487cccbd7097c6862'\n# Operator code (OP or OPC) of the UE\nop: '8e27b6af0e692e750f32667a3b14605d'\n# This value specifies the OP type and it can be either 'OP' or 'OPC'\nopType: 'OP'\n\n...\n\n# Initial PDU sessions to be established\nsessions:\n  - type: 'IPv4'\n    apn: 'internet'\n    slice:\n      sst: 0x01\n      sd: 0x010203\n\n# List of requested S-NSSAIs by this UE\nslices:\n  - sst: 0x01\n    sd: 0x010203\n\n...\n</code></pre> The data appear to be the same as what we set in WebConsole.</p>"},{"location":"guide/5-install-ueransim/#7-testing-ueransim-against-free5gc","title":"7. Testing UERANSIM against free5GC","text":"<p>SSH into free5gc. If you have rebooted free5gc, remember to do: <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -t nat -A POSTROUTING -o enp0s3 -j MASQUERADE\nsudo systemctl stop ufw\n</code></pre></p> <p>In addition, execute the following command: <pre><code>sudo iptables -I FORWARD 1 -j ACCEPT\n</code></pre></p> <p>Also, make sure you have make proper changes to the free5GC configuration files, then run <code>./run.sh</code>: <pre><code>cd ~/free5gc\n./run.sh\n</code></pre></p> <p>At this time free5GC has been started.</p> <p>Next, prepare three additional SSH terminals from your host machine (if you know how to use <code>tmux</code>, you can use just one).</p> <p>In terminal 1: SSH into ueransim, make sure UERANSIM is built, and configuration files have been changed correctly, then execute <code>nr-gnb</code>: <pre><code>cd ~/UERANSIM\nbuild/nr-gnb -c config/free5gc-gnb.yaml\n</code></pre></p> <p>In terminal 2, SSH into ueransim, and execute <code>nr-ue</code> with admin right: <pre><code>cd ~/UERANSIM\nsudo build/nr-ue -c config/free5gc-ue.yaml\n</code></pre></p> <p>In terminal 3, SSH into ueransim, and ping <code>192.168.56.101</code> to see free5gc is alive. Then, use ifconfig to see if the tunnel <code>uesimtun0</code> has been created (by nr-ue): <pre><code>$ ifconfig\n\nenp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255\n        inet6 fe80::a00:27ff:fe65:1472  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 08:00:27:65:14:72  txqueuelen 1000  (Ethernet)\n        RX packets 80  bytes 32423 (32.4 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 90  bytes 12860 (12.8 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nenp0s8: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 192.168.56.102  netmask 255.255.255.0  broadcast 192.168.56.255\n        inet6 fe80::a00:27ff:fe5e:be64  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 08:00:27:5e:be:64  txqueuelen 1000  (Ethernet)\n        RX packets 1515  bytes 130490 (130.4 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 1010  bytes 206670 (206.6 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 3445  bytes 174416 (174.4 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 3445  bytes 174416 (174.4 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nuesimtun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n        inet 60.60.0.1  netmask 255.255.255.255  destination 60.60.0.1\n        inet6 fe80::2034:d00:a76:84b7  prefixlen 64  scopeid 0x20&lt;link&gt;\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 3  bytes 252 (252.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 13  bytes 732 (732.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre></p> <p>Now use <code>ping</code>: <pre><code>ping -I uesimtun0 google.com\n</code></pre> If <code>ping</code> gets replies, then free5GC is running properly. Congratulations!</p>"},{"location":"guide/6-simple-app/","title":"free5GC Simple Apps","text":"<p>In this demo we will use free5GC together with UERANSIM to exercise on some simple network applications:</p> <ul> <li><code>ping</code> + <code>tcpdump</code></li> <li><code>wget</code> and <code>curl</code></li> </ul>"},{"location":"guide/6-simple-app/#ping-tcpdump","title":"ping + tcpdump","text":"<p>First start up free5GC and ueransim VMs. This requires one SSH terminal for free5gc, and two for ueransim.</p> <p>Open another SSH terminal and log in into ueransim: <pre><code>ssh 192.168.56.102 -l ubuntu\n</code></pre> Use <code>ifconfig</code> to check if <code>uesimtun0</code> tunnel has been created, and use ping to check if we can <code>ping</code> through it\uff1a <pre><code>$ ping google.com\nPING google.com (172.217.27.142) 56(84) bytes of data.\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=1 ttl=63 time=3.98 ms\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=2 ttl=63 time=3.87 ms\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=3 ttl=63 time=4.06 ms\n^C\n--- google.com ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2003ms\nrtt min/avg/max/mdev = 3.872/3.970/4.060/0.076 ms\n</code></pre></p> <pre><code>$ ping -I uesimtun0 google.com\nPING google.com (172.217.27.142) from 60.60.0.1 uesimtun0: 56(84) bytes of data.\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=1 ttl=61 time=5.85 ms\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=2 ttl=61 time=4.87 ms\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=3 ttl=61 time=4.76 ms\n^C\n--- google.com ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\nrtt min/avg/max/mdev = 4.760/5.160/5.847/0.487 ms\n</code></pre> <p>Also use <code>route -n</code> to observe if current routing table shows some routing rules regarding the two network interfaces <code>enp0s3</code> and <code>enp0s8</code>: <pre><code>$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         10.0.2.2        0.0.0.0         UG    100    0        0 enp0s3\n10.0.2.0        0.0.0.0         255.255.255.0   U     0      0        0 enp0s3\n10.0.2.2        0.0.0.0         255.255.255.255 UH    100    0        0 enp0s3\n192.168.56.0    0.0.0.0         255.255.255.0   U     0      0        0 enp0s8\n</code></pre></p> <p>The network <code>10.0.2.0/24</code> and its <code>enp0s3</code> interface are related to VirtualBox NAT network card. We can bring down this interface: <pre><code>$ sudo ifconfig enp0s3 down\n$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n192.168.56.0    0.0.0.0         255.255.255.0   U     0      0        0 enp0s8\n</code></pre> As shown aboe we have only Host-only network <code>192.168.56.0/24</code> left. Run <code>ping</code> again: <pre><code>$ ping 8.8.8.8\nping: connect: Network is unreachable\n</code></pre></p> <p>And see that it can not ping through, but runing: <pre><code>$ ping -I uesimtun0 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) from 60.60.0.1 uesimtun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=61 time=7.17 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=61 time=5.41 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=61 time=5.15 ms\n^C\n--- 8.8.8.8 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2005ms\nrtt min/avg/max/mdev = 5.150/5.907/7.165/0.895 ms\n</code></pre></p> <p>shows some responses, since we ask <code>ping</code> to go through the free5GC core network. To make <code>ping 8.8.8.8</code> in addition to <code>ping -I uesimtun0 8.8.8.8</code> work, we can set the <code>uesimtun0</code> interface (IP <code>60.60.0.1</code>) as the new default gateway: <pre><code>$ sudo ip r add default dev uesimtun0\n$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         0.0.0.0         0.0.0.0         U     0      0        0 uesimtun0\n192.168.56.0    0.0.0.0         255.255.255.0   U     0      0        0 enp0s8\n</code></pre> Now traffic not for the <code>192.168.56.0/24</code> network will go to <code>uesimtun0</code>, and <code>ping 8.8.8.8</code> works this time: <pre><code>$ ping 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=61 time=5.02 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=61 time=6.31 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=61 time=5.41 ms\n^C\n--- 8.8.8.8 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\nrtt min/avg/max/mdev = 5.017/5.581/6.312/0.541 ms\n...\n</code></pre></p> <p>Note that normally we are using ueransim to simulate \u201cterminal\u201d UE device, not as a network device or proxy, therefore the above two routing rules suffice.</p> <p>Now if we still want to run: <pre><code>$ ping google.com\nping: google.com: Temporary failure in name resolution\n</code></pre></p> <p>we will get unresolved domain name. To solve this, we can modify the file <code>/etc/resolv.conf</code>: <pre><code>sudo nano /etc/resolv.conf\n</code></pre></p> <p>and change the nameserver IP to <code>8.8.8.8</code>: <pre><code>nameserver 8.8.8.8\n</code></pre></p> <p>After the change, we can see <code>ping</code> getting responses: <pre><code>$ ping google.com\nPING google.com (216.58.200.46) 56(84) bytes of data.\n64 bytes from tsa01s08-in-f46.1e100.net (216.58.200.46): icmp_seq=1 ttl=61 time=5.19 ms\n64 bytes from tsa01s08-in-f46.1e100.net (216.58.200.46): icmp_seq=2 ttl=61 time=50.4 ms\n64 bytes from tsa01s08-in-f46.1e100.net (216.58.200.46): icmp_seq=3 ttl=61 time=5.66 ms\n^C\n--- google.com ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\nrtt min/avg/max/mdev = 5.191/20.423/50.414/21.207 ms\n</code></pre></p> <p>We can also examine the network traffic happening underneath in the scenario above. First we open another SSH terminal into ueransim, and run the following command: <pre><code>$ sudo tcpdump -n -i any host 60.60.0.1 or 192.168.56.101\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes\n</code></pre></p> <p>then run <code>ping 8.8.8.8</code> again, wait for a couple seconds, then <code>Ctrl-C</code> to exit. We see the data packets actually going in and out <code>uesimtun0</code>. <pre><code>$ sudo tcpdump -n -i any host 60.60.0.1 or 192.168.56.101\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes\n10:24:56.138729 IP 192.168.56.101.38412 &gt; 192.168.56.102.38740: sctp (1) [HB REQ]\n10:24:56.138783 IP 192.168.56.102.38740 &gt; 192.168.56.101.38412: sctp (1) [HB ACK]\n10:24:58.456532 IP 60.60.0.1 &gt; 8.8.8.8: ICMP echo request, id 33, seq 1, length 64\n10:24:58.457416 IP 192.168.56.102.2152 &gt; 192.168.56.101.2152: UDP, length 100\n10:24:58.462136 IP 192.168.56.101.2152 &gt; 192.168.56.102.2152: UDP, length 92\n10:24:58.462324 IP 8.8.8.8 &gt; 60.60.0.1: ICMP echo reply, id 33, seq 1, length 64\n10:24:59.458823 IP 60.60.0.1 &gt; 8.8.8.8: ICMP echo request, id 33, seq 2, length 64\n10:24:59.459031 IP 192.168.56.102.2152 &gt; 192.168.56.101.2152: UDP, length 100\n10:24:59.464214 IP 192.168.56.101.2152 &gt; 192.168.56.102.2152: UDP, length 92\n10:24:59.464396 IP 8.8.8.8 &gt; 60.60.0.1: ICMP echo reply, id 33, seq 2, length 64\n10:25:00.461293 IP 60.60.0.1 &gt; 8.8.8.8: ICMP echo request, id 33, seq 3, length 64\n10:25:00.462178 IP 192.168.56.102.2152 &gt; 192.168.56.101.2152: UDP, length 100\n10:25:00.474941 IP 192.168.56.101.2152 &gt; 192.168.56.102.2152: UDP, length 92\n10:25:00.475561 IP 8.8.8.8 &gt; 60.60.0.1: ICMP echo reply, id 33, seq 3, length 64\n10:25:01.463946 IP 60.60.0.1 &gt; 8.8.8.8: ICMP echo request, id 33, seq 4, length 64\n10:25:01.464523 IP 192.168.56.102.2152 &gt; 192.168.56.101.2152: UDP, length 100\n10:25:01.469297 IP 192.168.56.101.2152 &gt; 192.168.56.102.2152: UDP, length 92\n10:25:01.470314 IP 8.8.8.8 &gt; 60.60.0.1: ICMP echo reply, id 33, seq 4, length 64\n</code></pre></p>"},{"location":"guide/6-simple-app/#wget","title":"wget","text":"<p>Simply look for any web page for file download on the web. For example, if we choose Golang web site as an example, we may find the URL: <pre><code>https://golang.org/dl/go1.15.8.darwin-amd64.pkg\n</code></pre> Using the same network settings is the previous exercise, just <pre><code>wget https://golang.org/dl/go1.15.8.darwin-amd64.pkg\n</code></pre> And see if you can download a Golang 1.15.8 install file.</p>"},{"location":"guide/6-simple-app/#ptt-ssh-bbsupttcc","title":"ptt (<code>ssh bbsu@ptt.cc</code>)","text":"<p>You can actually use SSH in the ueransim VM to access remote site. For example, you can SSH to a well-known terminal-based BBS site in Taiwan: <pre><code>ssh bbsu@ppt.cc\n</code></pre></p>"},{"location":"guide/6-simple-app/#youtube","title":"Youtube","text":"<p>You can also use Youtube as an example app. To achieve this goal, you can install a desktop VM with graphical UI, such as Ubuntu Desktop, and follow the same procedure to install and start up UERANSIM, then access Youtube through <code>uesimtun0</code> and free5GC.</p> <p>To reduce resource consumption on your host machine, you may install Lubuntu (at https://lubuntu.me), a more light-weight Ubuntu desktop distro instead. But since viewing free5GC YouTube Channel requires quite sime CPU consumption, you may have to set at least 2 CPUs and 2048 MB memory for the VM.</p> <p>Refer to videos Access Youtube on Lubuntu (1, 2, 3, 4 and 5).</p>"},{"location":"guide/Appendix/","title":"Appendix","text":""},{"location":"guide/Appendix/#appendix-a-oam","title":"Appendix A: OAM","text":"<ol> <li>Run the OAM server <pre><code>cd webconsole\ngo run server.go\n</code></pre></li> <li>Access the OAM by <pre><code>URL: http://localhost:5000\nUsername: admin\nPassword: free5gc\n</code></pre></li> <li>Now you can see the information of currently registered UEs (e.g. Supi, connected state, etc.) in the core network at the tab \"DASHBOARD\" of free5GC webconsole</li> </ol> <p>Note: You can add the subscribers here too</p>"},{"location":"guide/Appendix/#appendix-b-orchestrator","title":"Appendix B: Orchestrator","text":"<p>Please refer to free5gmano</p>"},{"location":"guide/Appendix/#appendix-c-iptv","title":"Appendix C: IPTV","text":"<p>Please refer to free5GC/IPTV</p>"},{"location":"guide/Appendix/#appendix-d-system-environment-cleaning","title":"Appendix D: System Environment Cleaning","text":"<p>The below commands may be helpful for development purposes.</p> <ol> <li>Remove POSIX message queues<ul> <li><code>ls /dev/mqueue/</code></li> <li><code>rm /dev/mqueue/*</code></li> </ul> </li> <li>Remove gtp5g tunnels (using tools in libgtp5gnl)<ul> <li><code>cd ./src/upf/lib/libgtp5gnl/tools</code></li> <li><code>./gtp5g-tunnel list pdr</code></li> <li><code>./gtp5g-tunnel list far</code></li> </ul> </li> <li>Remove gtp5g devices (using tools in libgtp5gnl)<ul> <li><code>cd ./src/upf/lib/libgtp5gnl/tools</code></li> <li><code>sudo ./gtp5g-link del {Dev-Name}</code></li> </ul> </li> </ol>"},{"location":"guide/Appendix/#appendix-e-change-kernel-version","title":"Appendix E: Change Kernel Version","text":"<ol> <li>Check the previous kernel version: <code>uname -r</code></li> <li>Search specific kernel version and install, take <code>5.0.0-23-generic</code> for example <pre><code>sudo apt search 'linux-image-5.0.0-23-generic'\nsudo apt install 'linux-image-5.0.0-23-generic'\nsudo apt install 'linux-headers-5.0.0-23-generic'\n</code></pre></li> <li>Update initramfs and grub <pre><code>sudo update-initramfs -u -k all\nsudo update-grub\n</code></pre></li> <li>Reboot, enter grub and choose kernel version <code>5.0.0-23-generic</code> <pre><code>sudo reboot\n</code></pre></li> </ol>"},{"location":"guide/Appendix/#optional-remove-kernel-image","title":"Optional: Remove Kernel Image","text":"<pre><code>sudo apt remove 'linux-image-5.0.0-23-generic'\nsudo apt remove 'linux-headers-5.0.0-23-generic'\n</code></pre>"},{"location":"guide/Appendix/#appendix-f-program-the-sim-card","title":"Appendix F: Program the SIM Card","text":"<p>Install packages: <pre><code>sudo apt-get install pcscd pcsc-tools libccid python-dev swig python-setuptools python-pip libpcsclite-dev\nsudo pip install pycrypto\n</code></pre></p> <p>Download PySIM <pre><code>git clone git://git.osmocom.org/pysim.git\n</code></pre></p> <p>Change to pyscard folder and install <pre><code>cd &lt;pyscard-path&gt;\nsudo /usr/bin/python setup.py build_ext install\n</code></pre></p> <p>Verify your reader is ready</p> <pre><code>sudo pcsc_scan\n</code></pre> <p>Check whether your reader can read the SIM card <pre><code>cd &lt;pysim-path&gt;\n./pySim-read.py \u2013p 0\n</code></pre></p> <p>Program your SIM card information <pre><code>./pySim-prog.py -p 0 -x 208 -y 93 -t sysmoUSIM-SJS1 -i 208930000000003 --op=8e27b6af0e692e750f32667a3b14605d -k 8baf473f2f8fd09487cccbd7097c6862 -s 8988211000000088313 -a 23605945\n</code></pre></p> <p>You can get your SIM card from sysmocom. You also need a card reader to write your SIM card. You can get a card reader from here or use other similar devices.</p>"},{"location":"guide/Configuration/","title":"Configuration","text":""},{"location":"guide/Configuration/#sbi-configuration","title":"SBI Configuration","text":"<p>There are registerIP and bindingIP design on every NF's sbi interface.</p> <p></p> <p>This is due to some orchestration, such as Kubernets or OpenStack, has the design of service IP mapping.</p> <p></p> <p>Use Kubernets as an example. K8S has the service type that enable users to define the service IP outside the pod. But the service IP may be different from the IP assigned inside the pod. Therefore, if we register the binding IP inside the pod to NRF, NRF cannot know which service IP outside the pod has attached. As the result, we need to separate registerIP from bindingIP in this scenario.</p> <p>If you are not sure what IP you should set, just configure it as the same IP address.</p>"},{"location":"guide/Configuration/#sample-configuration","title":"Sample configuration","text":"<p>We provide a sample config to connect to outer ran under <code>/sample/ran_attach_config/</code>. The architecture is as following.</p> <p></p> <p>As the result, user's RAN IP must set to 192.168.0.0/24 subnet or let the routing route to this subnet.</p> <p>Notice: If user wants to use the setting, aware to set 192.168.0.1 to your host as well.</p>"},{"location":"guide/Configuration/#smf-configuration","title":"SMF Configuration","text":""},{"location":"guide/Configuration/#a-configure-smf-with-s-nssai","title":"A. Configure SMF with S-NSSAI","text":"<ol> <li>Configure NF Registration SMF S-NSSAI in <code>smfcfg.yaml</code></li> </ol>"},{"location":"guide/Configuration/#b-configure-uplink-classifier-ulcl-information-in-smf","title":"B. Configure Uplink Classifier (ULCL) information in SMF","text":"<ol> <li>Configure UE routing path in <code>uerouting.yaml</code></li> </ol> <ul> <li>DestinationIP and DestinationPort will be the packet destination.</li> <li>UPF field will be the packet datapath when it match the destination above.</li> </ul> <p>For more detail of SMF config, please refer to here.</p>"},{"location":"guide/Environment/","title":"Recommended Environment","text":"<p>free5gc has been tested against the following environment:</p> <ul> <li>Software<ul> <li>OS: Ubuntu 20.04.1</li> <li>gcc 7.3.0</li> <li>Go 1.14.4 linux/amd64</li> <li>kernel version 5.4.0-42-generic</li> </ul> </li> </ul> <p>The listed kernel version is required for the UPF element.</p> <ul> <li> <p>Minimum Hardware</p> <ul> <li>CPU: Intel i5 processor</li> <li>RAM: 4GB</li> <li>Hard drive: 160GB</li> <li>NIC: Any 1Gbps Ethernet card supported in the Linux kernel</li> </ul> </li> <li> <p>Recommended Hardware</p> <ul> <li>CPU: Intel i7 processor</li> <li>RAM: 8GB</li> <li>Hard drive: 160GB</li> <li>NIC: Any 10Gbps Ethernet card supported in the Linux kernel</li> </ul> </li> </ul> <p>This guide assumes that you will run all 5GC elements on a single machine.</p>"},{"location":"guide/Environment/#hardware-tested","title":"Hardware Tested","text":"<p>Some 5G UE and gNodeB hardware have been tested with free5GC by partners or community members: - 5G UE (Support 5G SA):     - APAL 5G Dongle     - APAL 5G MiFi     - Samsung S21 5G     - Huawei P40 5G (forum link)     - Huawei Mate30 5G (forum link) - gNodeB:     - Alpha gNodeB     - Compal gNodeB     - FII gNodeB     - ITRI gNodeB     - Lions gNodeB     - Amarisoft gNodeB (forum link)     - Nokia gNodeB (forum link)     - Nokia (AMIA AirScale Indoor Subrack 473098A)</p> <p>Welcome to report the tested hardware not listed above on Github issue or free5GC forum.</p> <p>PS: if you don't have any hardware available, suggest to use UERANSIM to simulate.</p> <p>(Refer to Advanced environment setup section)</p>"},{"location":"guide/New-Subscriber-via-webconsole/","title":"New Subscriber via webconsole","text":""},{"location":"guide/New-Subscriber-via-webconsole/#new-subscriber-via-webconsole","title":"New Subscriber via webconsole","text":""},{"location":"guide/New-Subscriber-via-webconsole/#1-install-webconsole","title":"1. Install webconsole","text":""},{"location":"guide/New-Subscriber-via-webconsole/#2-optionaldelete-mongodb","title":"2. (Optional)Delete MongoDB","text":"<p>If another version of free5GC was ran before, you have to delete MongoDB.</p> <pre><code>$ mongo --eval \"db.dropDatabase()\" free5gc\n</code></pre>"},{"location":"guide/New-Subscriber-via-webconsole/#3-run-webconsole-server","title":"3. Run WebConsole server","text":"<pre><code>$ cd ~/free5gc/webconsole\n$ ./bin/webconsole\n</code></pre>"},{"location":"guide/New-Subscriber-via-webconsole/#4-use-browser-to-connect-to-webconsole","title":"4. Use browser to connect to WebConsole","text":"<p>Enter :5000 in URL bar. <pre><code>Username: admin\nPassword: free5gc\n</code></pre>"},{"location":"guide/New-Subscriber-via-webconsole/#5-add-new-subscriber","title":"5. Add new subscriber","text":"<ul> <li>Choose SUBSCRIBERS in the left side and press New Subscriber button</li> <li>Fill the data and press Submit button</li> </ul>"},{"location":"guide/New-Subscriber-via-webconsole/#6-new-subscriber-is-added-successfully","title":"6. New subscriber is added successfully","text":""},{"location":"guide/New-Subscriber-via-webconsole/#7-modify-the-existed-subscriber","title":"7. Modify the existed subscriber","text":"<p>There are some issues for subscriber modification. If you want to modify the existed subscriber, please <code>Delete</code> it first and <code>New</code> again for now.</p>"},{"location":"guide/SMF-Config/","title":"SMF Config / ULCL Config","text":"<p>This document explains the detail of SMF config. Also provide some examples about conversion between config file and real userplane topology</p> <p>ULCL limitation: The branching UPF now can't connect to the Internet.  It only serves as a Intranet in the UPF topology. (Please refers to the topology of example 2)</p>"},{"location":"guide/SMF-Config/#sbi","title":"SBI","text":"Field meaning scheme The protocol for SBI registerIPv4 IP used to register to NRF bindingIPv4 IP used to bind the service port SMF bind the SBI service to this port"},{"location":"guide/SMF-Config/#pfcp","title":"PFCP","text":"Field meaning addr The IP address of N4 interface on the SMF (PFCP)"},{"location":"guide/SMF-Config/#userplane-information","title":"Userplane Information","text":"Field meaning userplane_information Includes topology and information of RAN and UPFs which are controlled by this SMF up_nodes The node in the user plane topology. Includes gNodeB, I-UPF and A-UPF links The edge in the user plane topology type Indicate it is RAN or specific kind of  UPF node_id The PFCP IPv4 address for UPF <p>Note: up_resource_ip serves as default user plane IP for the UPF. In this version, UPF will determine its user plane IP by itself. So setting up_resource_ip in SMF config won't affect real config in user plane.</p>"},{"location":"guide/SMF-Config/#amf-config","title":"AMF Config","text":"<p>To understand whole PDU session config, we must take a step forward to understand the AMF config.</p> Field meaning NGAPIPList The IP list of N2 interfaces on the AMF SBI Same meaning with SMF/SBI."},{"location":"guide/SMF-Config/#example-1","title":"Example 1","text":""},{"location":"guide/SMF-Config/#smf-config","title":"SMF Config","text":"<ul> <li>sbi:<ul> <li>scheme: http</li> <li>registerIPv4: 127.0.0.2</li> <li>bindingIPv4: 127.0.0.2</li> <li>port: 8000</li> </ul> </li> <li>pfcp:<ul> <li>addr: 10.200.200.1</li> </ul> </li> <li>userplane_information:<ul> <li>up_nodes:<ul> <li>gNB1:<ul> <li>type: AN</li> </ul> </li> <li>UPF:<ul> <li>type: UPF</li> <li>node_id: 10.200.200.102</li> </ul> </li> </ul> </li> <li>links:<ul> <li>A: gNB1</li> <li>B: UPF</li> </ul> </li> </ul> </li> </ul>"},{"location":"guide/SMF-Config/#amf-config_1","title":"AMF Config","text":"<ul> <li>ngapIpList:<ul> <li>127.0.0.1</li> </ul> </li> <li>sbi:<ul> <li>scheme: http</li> <li>registerIPv4: 127.0.0.18</li> <li>bindingIPv4: 127.0.0.18</li> <li>port: 8000</li> </ul> </li> </ul>"},{"location":"guide/SMF-Config/#representing-topology","title":"Representing Topology","text":""},{"location":"guide/SMF-Config/#example-2","title":"Example 2","text":""},{"location":"guide/SMF-Config/#smf-config_1","title":"SMF Config","text":"<ul> <li>sbi:<ul> <li>scheme: https</li> <li>registerIPv4: 127.0.0.2</li> <li>bindingIPv4: 127.0.0.2</li> <li>port: 29502</li> </ul> </li> <li>pfcp:<ul> <li>addr: 10.200.200.1</li> </ul> </li> <li>userplane_information:<ul> <li>up_nodes:<ul> <li>gNB1:<ul> <li>type: AN</li> </ul> </li> <li>BranchingUPF:<ul> <li>type: UPF</li> <li>node_id: 10.200.200.102</li> </ul> </li> <li>AnchorUPF1:<ul> <li>type: UPF</li> <li>node_id: 10.200.200.101</li> </ul> </li> <li>AnchorUPF2:<ul> <li>type: UPF</li> <li>node_id: 10.200.200.103</li> </ul> </li> <li>links:</li> <li>A: gNB1     B: BranchingUPF</li> <li>A: BranchingUPF     B: AnchorUPF1</li> <li>A: BranchingUPF     B: AnchorUPF2</li> </ul> </li> </ul> </li> </ul>"},{"location":"guide/SMF-Config/#amf-config_2","title":"AMF Config","text":"<ul> <li>ngapIpList:<ul> <li>127.0.0.1</li> </ul> </li> <li>sbi:<ul> <li>scheme: https</li> <li>registerIPv4: 127.0.0.18</li> <li>bindingIPv4: 127.0.0.18</li> <li>port: 8000</li> </ul> </li> </ul>"},{"location":"guide/SMF-Config/#representing-topology_1","title":"Representing Topology","text":""},{"location":"guide/Trouble_Shooting/","title":"Trouble Shooting","text":""},{"location":"guide/Trouble_Shooting/#1-error-sctp-failed-to-connect-given-amf-n3iwfngap","title":"1. <code>ERROR: [SCTP] Failed to connect given AMF    N3IWF=NGAP</code>","text":"<p>This error occured when N3IWF was started before AMF finishing initialization. This error usually appears when you run the TestNon3GPP in the first time.</p> <p>Rerun the test should be fine. If it still not be solved, larger the sleeping time in line 110 of <code>test.sh</code>.</p>"},{"location":"guide/Trouble_Shooting/#2-testnon3gpp","title":"2. TestNon3GPP","text":"<p>TestNon3GPP will modify the <code>config/amfcfg.conf</code>. So, if you had killed the TestNon3GPP test before it finished, you might need to copy <code>config/amfcfg.conf.bak</code> back to <code>config/amfcfg.conf</code> to let other tests pass.</p> <p><code>cp config/amfcfg.conf.bak config/amfcfg.conf</code></p>"},{"location":"guide/Trouble_Shooting/#3-db-on-tls-to-h2c","title":"3. DB on TLS to H2C","text":"<p>If you meet any problems about https or mogodb, it maybe couse our new version from v3.0.1 to v3.0.2 has change http to H2C verion. Try the command below.</p> <p><code>mongo --eval \"db.NfProfile.drop()\" free5gc</code></p>"},{"location":"guide/Trouble_Shooting/#4-mqcreate-error-creating-message-queue-too-many-open-files-upfutil-upf","title":"4. <code>MQCreate() Error creating message queue: Too many open files UPF=Util</code> (UPF)","text":"<p>Remove POSIX message queues</p> <pre><code>ls /dev/mqueue/\nrm /dev/mqueue/*\n</code></pre>"},{"location":"guide/Trouble_Shooting/#5-remove-gtp-devices-using-tools-in-libgtp5gnl-upf","title":"5. Remove gtp devices (using tools in libgtp5gnl) (UPF)","text":"<pre><code>cd lib/libgtp5gnl/tools\nsudo ./gtp5g-link del {Dev-Name}\n</code></pre>"},{"location":"guide/Trouble_Shooting/#6-upf-cli-run-error-open-gtp5g-open-link-create-file-exists","title":"6. <code>UPF Cli Run Error: open Gtp5g: open link: create: file exists</code>","text":"<pre><code>sudo ip link del upfgtp\n</code></pre>"},{"location":"guide/Trouble_Shooting/#7-decode-http2-packet-in-wireshark","title":"7. Decode HTTP/2 packet in Wireshark","text":"<ol> <li> <p>Run Network Function</p> <p>Check has XXFsslkey.log</p> </li> <li> <p>Edit &gt;&gt; Preference &gt;&gt; Protocols &gt;&gt; SSL (TLS)</p> <p></p> </li> <li> <p>Add keylog</p> <p></p> </li> <li> <p>Filter http2</p> <p></p> </li> </ol>"},{"location":"guide/Trouble_Shooting/#7-decode-h2c-http2-clear-text-without-tls","title":"7. Decode H2C (HTTP2 clear text without TLS)","text":"<p>The similar reason as NEA0 NAS message. Althrough H2C is clear text, wirshark still considers these packets as the normal TCP packets and does not decode them by HTTP2.</p> <p>To see the details of H2C packets, do the following configuration.</p> <ol> <li> <p>Analyze \u2192 Decode As\u2026</p> <p></p> </li> <li> <p>click Add button to add the decode rules</p> <p></p> <p>Decode the packets from the TCP ports listened by each NF as HTTP2 packets.</p> </li> </ol>"},{"location":"guide/features/","title":"free5GC Specification","text":"<ul> <li>3GPP TS 23.501/23.502-Rel-15</li> <li>5G Standalone (SA) supported</li> <li>Serviced-Based Interface (SBI) supported<ul> <li>Namf, Nsmf, Nausf, Nudm, Nudr, Nnssf, Nnrf, Npcf</li> </ul> </li> <li>N1, N2, N3, N4, N6, N9, interfaces supported</li> <li>5G SA Network Functions supported:<ul> <li>AMF: Access and Mobility Management Function<ul> <li>Registration Management, Connection Management, Reachability Management, Mobility Management, and Authentication</li> </ul> </li> <li>SMF: Session Management Function<ul> <li>Session Management, IP Assigning/Management</li> </ul> </li> <li>UPF: User Plane Function<ul> <li>Support multiple UPF and ULCL (uplink classifier)</li> <li>Session and Service Continuity (SSC) mode 1</li> <li>Packet Routing/Forwarding</li> </ul> </li> <li>AUSF: Authentication Server Function</li> <li>NRF: NF Repository Function</li> <li>UDM: Unified Data Management</li> <li>UDR: Unified Data Repository</li> <li>PCF: Policy and Charging Function</li> <li>NSSF: Network Slice Selection Function</li> <li>N3IWF: Non-3GPP Interworking Function</li> </ul> </li> </ul>"},{"location":"guide/features/#supported-features","title":"Supported features","text":"<ul> <li>Registration<ul> <li>Initial Registration</li> <li>Periodic Registration</li> <li>Mobility Registration</li> </ul> </li> <li>Authentication<ul> <li>5G-AKA</li> <li>EAP-AKA'</li> </ul> </li> <li>NAS Security<ul> <li>Ciphering: NEA0, NEA1, NEA2, NEA3</li> <li>Integrity: NIA0, NIA1, NIA2, NIA3</li> </ul> </li> <li>Deregistration:<ul> <li>UE-initiated Deregistration</li> </ul> </li> <li>Service Request:<ul> <li>UE triggered Service Request</li> <li>Network Triggered Service Request</li> </ul> </li> <li>AN Release</li> <li>PDU Session Establishment</li> <li>PDU Session Modification (v3.3.0)</li> <li>PDU Session Release</li> <li>Handover<ul> <li>N2 Handover (Indirect mode not supported)</li> <li>Xn Handover</li> </ul> </li> <li>QoS<ul> <li>Control Plane only:<ol> <li>5QI, ARP, GBR, MBR of QoS Flow (v3.3.0)</li> <li>Session-AMBR supported</li> </ol> </li> </ul> </li> <li>Collection and reporting of usage data over N4 interface<ul> <li>Volume measurement periodically</li> </ul> </li> <li>UP Security</li> <li>Multiple UPFs and ULCL (Uplink Classifier)</li> <li>Multiple Slice and DNN</li> <li>Dynamic/Static IPv4 address allocation</li> </ul>"},{"location":"membership/","title":"Membership Info","text":"<p>Info</p> <p>You can also download the PDF file here.</p>"},{"location":"membership/#membership-services","title":"Membership services","text":""},{"location":"membership/#discount-for-workshop-and-seminar","title":"Discount for workshop and seminar","text":"<p>The discount for attending workshops, training courses, and seminars held by us will be based on the Membership Level selected above.</p>"},{"location":"membership/#technical-support","title":"Technical support","text":"<p>We will provide technical support for free5GC software for the members based on the Membership Level selected above. For services information, please contact Ms. Hsiaotsui Chen:</p> <ul> <li>Email: free5GC.org@gmail.com</li> </ul> <p>Tips</p> <ul> <li>You don\u2019t need to join our membership program to use free5GC. You can download free5GC from https://github.com/free5gc/free5gc.</li> <li>The license of free5GC follows Apache 2.0. That is, anyone can use free5GC for commercial purposes for free. We will not charge any license fee. You can also ask your technical questions at the free5GC forum: https://forum.free5gc.org/</li> </ul> <p>By joining free5GC membership, it shows your support for us, and you can also receive answers to your technical questions from us promptly.</p>"}]}